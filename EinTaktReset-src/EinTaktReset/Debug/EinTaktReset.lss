
EinTaktReset.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b13  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005df  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	54 c1       	rjmp	.+680    	; 0x2c0 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 30       	cpi	r26, 0x0F	; 15
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	af d0       	rcall	.+350    	; 0x1b0 <main>
  52:	6e c1       	rjmp	.+732    	; 0x330 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <clk_off>:
#include <avr/io.h>
#include "board.h"

void clk_off()
{
	PORTB &= ~((1 << CLK_PIN) | (1 << CLK_LED_PIN));
  56:	85 b1       	in	r24, 0x05	; 5
  58:	89 7f       	andi	r24, 0xF9	; 249
  5a:	85 b9       	out	0x05, r24	; 5
  5c:	08 95       	ret

0000005e <clk_on>:
}

void clk_on()
{
	PORTB |= (1 << CLK_PIN) | (1 << CLK_LED_PIN);
  5e:	85 b1       	in	r24, 0x05	; 5
  60:	86 60       	ori	r24, 0x06	; 6
  62:	85 b9       	out	0x05, r24	; 5
  64:	08 95       	ret

00000066 <enable_cu>:
}

void enable_cu()
{
	PORTD &= ~(1 << _EN_CU);
  66:	8b b1       	in	r24, 0x0b	; 11
  68:	8d 7f       	andi	r24, 0xFD	; 253
  6a:	8b b9       	out	0x0b, r24	; 11
  6c:	08 95       	ret

0000006e <disable_cu>:
}

void disable_cu()
{
	PORTD |= (1 << _EN_CU);
  6e:	8b b1       	in	r24, 0x0b	; 11
  70:	82 60       	ori	r24, 0x02	; 2
  72:	8b b9       	out	0x0b, r24	; 11
  74:	08 95       	ret

00000076 <enable_auto>:
}

void enable_auto()
{
	PORTD &= ~(1 << _AUTO);
  76:	8b b1       	in	r24, 0x0b	; 11
  78:	8f 77       	andi	r24, 0x7F	; 127
  7a:	8b b9       	out	0x0b, r24	; 11
  7c:	08 95       	ret

0000007e <disable_auto>:
}

void disable_auto()
{
	PORTD |= (1 << _AUTO);
  7e:	8b b1       	in	r24, 0x0b	; 11
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b b9       	out	0x0b, r24	; 11
  84:	08 95       	ret

00000086 <debounce>:
	}
	else
	{
		return false;
	}
}
  86:	fc 01       	movw	r30, r24
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	a9 01       	movw	r20, r18
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <debounce+0x12>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <debounce+0xe>
  9c:	28 2f       	mov	r18, r24
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	24 23       	and	r18, r20
  a2:	35 23       	and	r19, r21
  a4:	02 c0       	rjmp	.+4      	; 0xaa <debounce+0x24>
  a6:	35 95       	asr	r19
  a8:	27 95       	ror	r18
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <debounce+0x20>
  ae:	80 81       	ld	r24, Z
  b0:	82 17       	cp	r24, r18
  b2:	59 f0       	breq	.+22     	; 0xca <debounce+0x44>
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	81 83       	std	Z+1, r24	; 0x01
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	88 23       	and	r24, r24
  be:	31 f0       	breq	.+12     	; 0xcc <debounce+0x46>
  c0:	11 82       	std	Z+1, r1	; 0x01
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	82 83       	std	Z+2, r24	; 0x02
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret
  ca:	11 82       	std	Z+1, r1	; 0x01
  cc:	08 95       	ret

000000ce <debounce_all>:
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	d8 df       	rcall	.-80     	; 0x86 <debounce>
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	d4 df       	rcall	.-88     	; 0x86 <debounce>
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	89 e0       	ldi	r24, 0x09	; 9
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	d0 df       	rcall	.-96     	; 0x86 <debounce>
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	cc df       	rcall	.-104    	; 0x86 <debounce>
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	c8 df       	rcall	.-112    	; 0x86 <debounce>
  f6:	08 95       	ret

000000f8 <starte_automatischen_takt>:
  f8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
  fc:	87 70       	andi	r24, 0x07	; 7
  fe:	d1 f4       	brne	.+52     	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
 100:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <CLK_Speed_debounce_state>
 104:	88 23       	and	r24, r24
 106:	39 f0       	breq	.+14     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 110:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 114:	06 c0       	rjmp	.+12     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
 116:	88 ee       	ldi	r24, 0xE8	; 232
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7ff085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7ff084>
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	85 60       	ori	r24, 0x05	; 5
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <stoppe_automatischen_takt>:
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 7f       	andi	r24, 0xF8	; 248
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <tick_loop>:
 142:	c5 df       	rcall	.-118    	; 0xce <debounce_all>
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	81 11       	cpse	r24, r1
 14a:	0e c0       	rjmp	.+28     	; 0x168 <tick_loop+0x26>
 14c:	f4 df       	rcall	.-24     	; 0x136 <stoppe_automatischen_takt>
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	83 7e       	andi	r24, 0xE3	; 227
 152:	8b b9       	out	0x0b, r24	; 11
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	83 66       	ori	r24, 0x63	; 99
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	8c 67       	ori	r24, 0x7C	; 124
 15e:	8a b9       	out	0x0a, r24	; 10
 160:	85 b1       	in	r24, 0x05	; 5
 162:	86 60       	ori	r24, 0x06	; 6
 164:	85 b9       	out	0x05, r24	; 5
 166:	08 95       	ret
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	83 78       	andi	r24, 0x83	; 131
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	83 78       	andi	r24, 0x83	; 131
 172:	8b b9       	out	0x0b, r24	; 11
 174:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <CU_ON_OFF_debounce_state>
 178:	81 11       	cpse	r24, r1
 17a:	04 c0       	rjmp	.+8      	; 0x184 <tick_loop+0x42>
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8c 77       	andi	r24, 0x7C	; 124
 180:	8b b9       	out	0x0b, r24	; 11
 182:	03 c0       	rjmp	.+6      	; 0x18a <tick_loop+0x48>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	83 68       	ori	r24, 0x83	; 131
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <CLK_auto_ON_OFF_debounce_state>
 18e:	81 11       	cpse	r24, r1
 190:	0d c0       	rjmp	.+26     	; 0x1ac <tick_loop+0x6a>
 192:	d1 df       	rcall	.-94     	; 0x136 <stoppe_automatischen_takt>
 194:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <CLK_manual_debounce_state>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	21 f4       	brne	.+8      	; 0x1a4 <tick_loop+0x62>
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	89 7f       	andi	r24, 0xF9	; 249
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	08 95       	ret
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	86 60       	ori	r24, 0x06	; 6
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret
 1ac:	a5 df       	rcall	.-182    	; 0xf8 <starte_automatischen_takt>
 1ae:	08 95       	ret

000001b0 <main>:
 1b0:	84 b1       	in	r24, 0x04	; 4
 1b2:	86 60       	ori	r24, 0x06	; 6
 1b4:	84 b9       	out	0x04, r24	; 4
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	87 b9       	out	0x07, r24	; 7
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	8a b1       	in	r24, 0x0a	; 10
 1c2:	83 68       	ori	r24, 0x83	; 131
 1c4:	8a b9       	out	0x0a, r24	; 10
 1c6:	86 b1       	in	r24, 0x06	; 6
 1c8:	82 70       	andi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	ec e0       	ldi	r30, 0x0C	; 12
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	80 83       	st	Z, r24
 1d6:	11 82       	std	Z+1, r1	; 0x01
 1d8:	12 82       	std	Z+2, r1	; 0x02
 1da:	86 b1       	in	r24, 0x06	; 6
 1dc:	84 70       	andi	r24, 0x04	; 4
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	e6 e0       	ldi	r30, 0x06	; 6
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	80 83       	st	Z, r24
 1ee:	11 82       	std	Z+1, r1	; 0x01
 1f0:	12 82       	std	Z+2, r1	; 0x02
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	88 70       	andi	r24, 0x08	; 8
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	95 95       	asr	r25
 1fa:	87 95       	ror	r24
 1fc:	95 95       	asr	r25
 1fe:	87 95       	ror	r24
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	a9 e0       	ldi	r26, 0x09	; 9
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	8c 93       	st	X, r24
 20a:	11 96       	adiw	r26, 0x01	; 1
 20c:	1c 92       	st	X, r1
 20e:	11 97       	sbiw	r26, 0x01	; 1
 210:	12 96       	adiw	r26, 0x02	; 2
 212:	1c 92       	st	X, r1
 214:	86 b1       	in	r24, 0x06	; 6
 216:	80 71       	andi	r24, 0x10	; 16
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	95 95       	asr	r25
 228:	87 95       	ror	r24
 22a:	a3 e0       	ldi	r26, 0x03	; 3
 22c:	b1 e0       	ldi	r27, 0x01	; 1
 22e:	8c 93       	st	X, r24
 230:	11 96       	adiw	r26, 0x01	; 1
 232:	1c 92       	st	X, r1
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	12 96       	adiw	r26, 0x02	; 2
 238:	1c 92       	st	X, r1
 23a:	86 b1       	in	r24, 0x06	; 6
 23c:	80 72       	andi	r24, 0x20	; 32
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	95 95       	asr	r25
 242:	87 95       	ror	r24
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	95 95       	asr	r25
 24a:	87 95       	ror	r24
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	a0 e0       	ldi	r26, 0x00	; 0
 256:	b1 e0       	ldi	r27, 0x01	; 1
 258:	8c 93       	st	X, r24
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	1c 92       	st	X, r1
 25e:	11 97       	sbiw	r26, 0x01	; 1
 260:	12 96       	adiw	r26, 0x02	; 2
 262:	1c 92       	st	X, r1
 264:	a1 e8       	ldi	r26, 0x81	; 129
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	8c 91       	ld	r24, X
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	8c 93       	st	X, r24
 26e:	af e6       	ldi	r26, 0x6F	; 111
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	8c 91       	ld	r24, X
 274:	82 60       	ori	r24, 0x02	; 2
 276:	8c 93       	st	X, r24
 278:	88 ee       	ldi	r24, 0xE8	; 232
 27a:	93 e0       	ldi	r25, 0x03	; 3
 27c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 280:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 284:	80 81       	ld	r24, Z
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	11 f4       	brne	.+4      	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
 28a:	36 df       	rcall	.-404    	; 0xf8 <starte_automatischen_takt>
 28c:	07 c0       	rjmp	.+14     	; 0x29c <__DATA_REGION_LENGTH__+0x9c>
 28e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <CLK_manual_debounce_state>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	11 f4       	brne	.+4      	; 0x29a <__DATA_REGION_LENGTH__+0x9a>
 296:	df de       	rcall	.-578    	; 0x56 <clk_off>
 298:	01 c0       	rjmp	.+2      	; 0x29c <__DATA_REGION_LENGTH__+0x9c>
 29a:	e1 de       	rcall	.-574    	; 0x5e <clk_on>
 29c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <CU_ON_OFF_debounce_state>
 2a0:	88 23       	and	r24, r24
 2a2:	19 f0       	breq	.+6      	; 0x2aa <__DATA_REGION_LENGTH__+0xaa>
 2a4:	e0 de       	rcall	.-576    	; 0x66 <enable_cu>
 2a6:	e7 de       	rcall	.-562    	; 0x76 <enable_auto>
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <__DATA_REGION_LENGTH__+0xae>
 2aa:	e1 de       	rcall	.-574    	; 0x6e <disable_cu>
 2ac:	e8 de       	rcall	.-560    	; 0x7e <disable_auto>
 2ae:	78 94       	sei
 2b0:	48 df       	rcall	.-368    	; 0x142 <tick_loop>
 2b2:	89 ef       	ldi	r24, 0xF9	; 249
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <__DATA_REGION_LENGTH__+0xb6>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__DATA_REGION_LENGTH__+0xbc>
 2bc:	00 00       	nop
 2be:	f8 cf       	rjmp	.-16     	; 0x2b0 <__DATA_REGION_LENGTH__+0xb0>

000002c0 <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	if (PINB & (1 << CLK_PIN)) {
 2e2:	19 9b       	sbis	0x03, 1	; 3
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__vector_11+0x2a>
		// Der Takt ist 1
		// Takt auf 0 setzen
		//PORTB &= ~((1 << CLK_PIN) | (1 << CLK_LED_PIN));
		clk_off();		
 2e6:	b7 de       	rcall	.-658    	; 0x56 <clk_off>
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <__vector_11+0x2c>
	} else {
		// Der Takt ist 0
		// Takt auf 1 setzen
		clk_on();
 2ea:	b9 de       	rcall	.-654    	; 0x5e <clk_on>
		//PORTB |= (1 << CLK_PIN) | (1 << CLK_LED_PIN);
	}	
			
	if (CLK_Speed_debounce_state.debounced_state) {
 2ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <CLK_Speed_debounce_state>
 2f0:	88 23       	and	r24, r24
 2f2:	39 f0       	breq	.+14     	; 0x302 <__stack+0x3>
		// schnell		
		OCR1A = 5;
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 2fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 300:	06 c0       	rjmp	.+12     	; 0x30e <__stack+0xf>
	} else {
		// langsam
		OCR1A = 1000;
 302:	88 ee       	ldi	r24, 0xE8	; 232
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
